FUNCION: fn
UNKNOWN: fibonacci(limit:
UNKNOWN: int32):
INDENTIFIER: int32
UNKNOWN: {
INDENTIFIER: let
INDENTIFIER: mut
UNKNOWN: i:
INDENTIFIER: int32
UNKNOWN: =
UNKNOWN: 0;
INDENTIFIER: let
INDENTIFIER: mut
UNKNOWN: out:
INDENTIFIER: int32
UNKNOWN: =
UNKNOWN: 0;
INDENTIFIER: let
INDENTIFIER: mut
UNKNOWN: a1:
INDENTIFIER: int32
UNKNOWN: =
UNKNOWN: 0;
INDENTIFIER: let
INDENTIFIER: mut
UNKNOWN: a2:
INDENTIFIER: int32
UNKNOWN: =
UNKNOWN: 1;
WHILE: while
UNKNOWN: (i
UNKNOWN: <
UNKNOWN: limit)
UNKNOWN: {
INDENTIFIER: out
UNKNOWN: =
INDENTIFIER: a1
UNKNOWN: +
UNKNOWN: a2;
INDENTIFIER: a1
UNKNOWN: =
UNKNOWN: a2;
INDENTIFIER: a2
UNKNOWN: =
UNKNOWN: out;
UNKNOWN: }
INDENTIFIER: return
UNKNOWN: out;
UNKNOWN: }
FUNCION: fn
UNKNOWN: main():
INDENTIFIER: int8
UNKNOWN: {
INDENTIFIER: let
UNKNOWN: limit:
INDENTIFIER: int32
UNKNOWN: =
UNKNOWN: 5;
UNKNOWN: print(fibonacci(limit))
INDENTIFIER: return
UNKNOWN: 0;
UNKNOWN: }
